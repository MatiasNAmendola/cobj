# Class examples. (draft only)

#myclass = func() {
    #name = "no name yet!"; # private
    #return func() {
        ## public methods
        #this.get_name = func() {
            #return name;
        #}
        #this.set_name = func(n) {
            #name = n;
        #}
        ## public attributes
        #this.version = 0.1;
    #};
#};

#instance_a = myclass();

#x:method(y) -> x.method(x, y) # syntactically equal
#class Complex
    #real = 0
    #image = 0
    #func __add__(self, other)
    #end
    #func __sub__(self, other)
    #end
#end


# prototype-based I prefer

# call object's method
# 
# obj.attr = obj[attr_name] # attr_name is a name which is string object has value "attr"
# obj->meth(arg1, arg2, ..., argn) -> obj.meth(obj, arg1, arg2, ..., argn)
# obj::meth(arg1, arg2, ..., argn)
# obj.data: access obj's data
# obj.meth: ascess obj's meth
# foo.bar.data: access foo's bar, then access bar's data
# foo.bar->meth
# foo.bar::meth
